services:
  n8n:
    image: n8nio/n8n:latest
    restart: always
    environment:
      # Auth/UI
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL}
      - NODE_ENV=production

      # DB
      - N8N_POSTGRES_HOST=postgres
      - N8N_POSTGRES_PORT=5432
      - N8N_POSTGRES_USER=${POSTGRES_USER}
      - N8N_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_POSTGRES_DB=${POSTGRES_DB}

      # Seguridad / features
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true

      # Cola (main UI en modo cola, ejecutan los workers)
      - EXECUTIONS_MODE=queue
      - N8N_EXECUTIONS_PROCESS=main
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n_network

  n8n_worker1:
    image: n8nio/n8n:latest
    restart: always
    command: worker
    environment:
      - NODE_ENV=production
      - N8N_LOG_LEVEL=debug

      # DB
      - N8N_POSTGRES_HOST=postgres
      - N8N_POSTGRES_PORT=5432
      - N8N_POSTGRES_USER=${POSTGRES_USER}
      - N8N_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_POSTGRES_DB=${POSTGRES_DB}

      # Cola y Redis
      - N8N_EXECUTIONS_PROCESS=worker
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_ENABLED=true
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_WORKER_CONCURRENCY=10
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true

      # Clave igual que en la web
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - n8n_network

  n8n_worker2:
    image: n8nio/n8n:latest
    restart: always
    command: worker
    environment:
      - NODE_ENV=production
      - N8N_LOG_LEVEL=debug

      # DB
      - N8N_POSTGRES_HOST=postgres
      - N8N_POSTGRES_PORT=5432
      - N8N_POSTGRES_USER=${POSTGRES_USER}
      - N8N_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_POSTGRES_DB=${POSTGRES_DB}

      # Cola y Redis
      - N8N_EXECUTIONS_PROCESS=worker
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_ENABLED=true
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_WORKER_CONCURRENCY=10
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true

      # Clave igual que en la web
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - n8n_network

  postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - n8n_network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - n8n_network
    # sin "ports": exponelo por dominio en Coolify (service port 80)

  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - n8n_network

  redis_admin:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - n8n_network
    # sin "ports": exponelo por dominio en Coolify (service port 8081)

networks:
  n8n_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  pgadmin_data:
